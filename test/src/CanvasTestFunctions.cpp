/*
        ##########    Copyright (C) 2018 Vincenzo Pacella
        ##      ##    Distributed under MIT license, see file LICENSE
        ##      ##    or <http://opensource.org/licenses/MIT>
        ##      ##
##########      ############################################################# shaduzlabs.com #####*/

#include "CanvasTestFunctions.h"

#include <algorithm>
#include <iostream>

#include <rastr/StaticCanvas.hpp>
#include <rastr/DynamicCanvas.hpp>

#include "fonts/default_monospace_5.h"
#include "fonts/default_monospace_7.h"
#include "fonts/default_monospace_8.h"

#include "fonts/DroidSansMono_Regular_20_1bpp.h"
#include "fonts/DroidSansMono_Regular_20_8bpp.h"
#include "fonts/DroidSansMono_Regular_32_1bpp.h"
#include "fonts/DroidSansMono_Regular_32_8bpp.h"

//--------------------------------------------------------------------------------------------------

namespace sl
{
namespace rastr
{
namespace test
{
namespace
{
const Color k_colorTransparent{};
const Color k_colorBlack{0x00};
const Color k_colorBlue{0x00, 0x00, 0xff, 0xcc};
const Color k_colorRed{0xff, 0x00, 0x00, 0x7f};
const Color k_colorGreen{0x00, 0xff, 0x00, 0x33};
const Color k_colorWhite{0xff};
const Color k_colorInvert{BlendMode::invert};
}

//--------------------------------------------------------------------------------------------------

void lines(Canvas* c_)
{
  unsigned width{c_->width()};
  unsigned height{c_->height()};

  c_->line(0, height, width, height, k_colorWhite);
  c_->line(0, height, width, 0, k_colorWhite);
  c_->line(0, 0, width * 2, height * 2, k_colorWhite);
  c_->lineHorizontal(0, height / 2, 2500, k_colorWhite);
  c_->lineVertical(width / 2, height / 2, 2500, k_colorWhite);

  c_->line(0, (height / 4) * 3, width, height, k_colorBlue);
  c_->line(0, ((height / 4) * 3) + 1, width, height + 1, k_colorBlue);

  c_->line(width, (height / 4) * 3, 0, height, k_colorRed);
  c_->line(width, ((height / 4) * 3) + 1, 0, height + 1, k_colorRed);

  c_->lineHorizontal(0, (height / 8) * 7, 2500, k_colorGreen);
  c_->lineHorizontal(0, ((height / 8) * 7) + 1, 2500, k_colorGreen);

  for (unsigned i = 0; i < height / 2; i += 2)
  {
    c_->lineHorizontal(0, i, 2500, k_colorInvert);
  }

  for (unsigned i = width / 4; i < (width / 4) * 3; i += 2)
  {
    c_->lineVertical(i, 0, 2500, k_colorInvert);
  }
}

//--------------------------------------------------------------------------------------------------

void circles(Canvas* c_)
{
  unsigned width{c_->width()};
  unsigned height{c_->height()};

  c_->circle(width / 2, height / 2, std::min(width / 2, height / 2), k_colorBlue);

  c_->circle(width / 3, height / 3, 0, k_colorBlue);
  c_->circleFilled(width / 3, height / 3, 0, k_colorBlue, k_colorBlue);

  c_->circleFilled(
    (width / 4), (height / 4), std::min(width / 4, height / 4), k_colorBlue, k_colorInvert);
  c_->circleFilled(
    (width / 4) * 3, (height / 4) * 3, std::min(width / 4, height / 4), k_colorGreen, k_colorInvert);
  c_->circleFilled(
    (width / 4) * 3, (height / 4), std::min(width / 4, height / 4), k_colorRed, k_colorInvert);
  c_->circleFilled(
    (width / 4), (height / 4) * 3, std::min(width / 4, height / 4), k_colorWhite, k_colorInvert);

  c_->circleFilled((width / 4),
    (height / 4) * 3,
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::QuarterBottomLeft);
  c_->circleFilled((width / 4) * 3,
    (height / 4) * 3,
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::QuarterBottomRight);
  c_->circleFilled((width / 4),
    (height / 4),
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::QuarterTopLeft);
  c_->circleFilled((width / 4) * 3,
    (height / 4),
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::QuarterTopRight);

  c_->circleFilled((width / 4),
    (height / 2),
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::SemiLeft);
  c_->circleFilled((width / 4) * 3,
    (height / 2),
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::SemiRight);
  c_->circleFilled((width / 2),
    (height / 4),
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::SemiTop);
  c_->circleFilled((width / 2),
    (height / 4) * 3,
    std::min(width / 8, height / 8),
    k_colorBlack,
    k_colorGreen,
    Canvas::CircleType::SemiBottom);

  c_->circleFilled(
    (width / 8), (height / 8), std::min(width / 8, height / 8), k_colorBlue, k_colorInvert);
  c_->circleFilled(
    (width / 8) * 7, (height / 8) * 7, std::min(width / 8, height / 8), k_colorGreen, k_colorInvert);
  c_->circleFilled(
    (width / 8) * 7, (height / 8), std::min(width / 8, height / 8), k_colorRed, k_colorInvert);
  c_->circleFilled(
    (width / 8), (height / 8) * 7, std::min(width / 8, height / 8), k_colorWhite, k_colorInvert);
}

//--------------------------------------------------------------------------------------------------

void triangles(Canvas* c_)
{
  c_->triangle(5, 5, 100, 100, 100, 30, k_colorWhite);
  c_->triangle(105, 50, 10, 20, 1, 70, k_colorBlue);
  c_->triangle(25, 15, 1, 1, 12, 300, k_colorGreen);
  c_->triangle(c_->width() - 1, c_->height(), 0, 25, c_->width() - 1, 99, k_colorRed);

  c_->triangleFilled(160, 1, 12, 1, 300, 1, k_colorWhite, k_colorInvert);
  c_->triangleFilled(160, 1, 12, 1, 3, 1, k_colorWhite, k_colorInvert);
  c_->triangleFilled(1, 1, 111, 1, 3, 1, k_colorWhite, k_colorInvert);
  c_->triangleFilled(115, 45, 1, 45, 100, 1, k_colorWhite, k_colorInvert);
  c_->triangleFilled(15, 45, 10, 10, 100, 1, k_colorWhite, k_colorInvert);
  c_->triangleFilled(15, 45, 10, 10, 100, 130, k_colorWhite, k_colorInvert);
  c_->triangleFilled(1, 5, 90, 90, 12, 170, k_colorBlue, k_colorInvert);
  c_->triangleFilled(25, 15, 1, 1, 12, 300, k_colorGreen, k_colorInvert);
  c_->triangleFilled(
    1, c_->height(), c_->width() - 1, 25, c_->width() - 1, 99, k_colorRed, k_colorInvert);
}

//--------------------------------------------------------------------------------------------------

void rectangles(Canvas* c_)
{
  unsigned w = c_->width();
  unsigned h = c_->height();

  c_->rectangleFilled(2, 2, 0, h - 4, k_colorWhite, k_colorRed);
  c_->rectangleFilled(2, 2, w - 4, h - 4, k_colorWhite, k_colorRed);
  c_->rectangleFilled(2, 2, w - 4, 2, k_colorWhite, k_colorRed);
  c_->rectangle(w / 8, h / 8, w / 4, h / 4, k_colorGreen);
  c_->rectangle((w / 8) * 5, (h / 8) * 5, w / 4, h / 4, k_colorBlue);
  c_->rectangle((w / 8), (h / 8) * 5, w / 4, h / 4, k_colorBlack);
  c_->rectangle((w / 8) * 5, (h / 8), w / 4, h / 4, k_colorWhite);
  c_->rectangle((w / 8) * 6, (h / 8) * 6, w / 4, h / 4, k_colorTransparent);

  c_->rectangleRounded((w / 8), (h / 8), (w / 4) * 2, (h / 4) * 2, 5, k_colorWhite);

  c_->rectangleFilled(
    (w / 8), (h / 8), (w / 4) * 3, (h / 4) * 3, k_colorTransparent, k_colorInvert);
  c_->rectangleRoundedFilled((w / 4), (h / 4), w / 2, h / 2, 4, k_colorInvert, k_colorInvert);
  c_->rectangleRoundedFilled((w / 4), (h / 4), 0, h / 2, 4, k_colorInvert, k_colorInvert);
  c_->rectangleRoundedFilled((w / 4), (h / 4), w / 2, h / 2, 1000, k_colorInvert, k_colorInvert);
}

//--------------------------------------------------------------------------------------------------

void text(Canvas* c_)
{

  c_->putCharacter(5, 10, '*', k_colorGreen, k_font_DefaultMonospace_5);
  c_->putCharacter(5, 20, '*', k_colorRed, k_font_DefaultMonospace_7);
  c_->putCharacter(5, 30, '*', k_colorWhite, k_font_DefaultMonospace_8);


  c_->putText(40, 10, "Life is short.", k_colorWhite, k_font_DefaultMonospace_5);
  c_->putText(40, 20, "Smile while", k_colorBlue, k_font_DefaultMonospace_7);
  c_->putText(40, 30, "you still", k_colorRed, k_font_DefaultMonospace_8);
  c_->putText(40, 44, "have teeth.", k_colorGreen, k_font_DefaultMonospace_7);

  c_->putText(40, 110, "20", k_colorWhite, k_font_DroidSansMono_Regular_20_1bpp);
  c_->putText(70, 110, "32", k_colorBlue, k_font_DroidSansMono_Regular_32_1bpp);

  c_->putText(4,
    c_->height() - 12,
    "Lorem ipsum dolor sit amet, consectetur adipisci elit, sed eiusmod tempor incidunt ut labore "
    "et dolore magna aliqua.",
    k_colorWhite,
    k_font_DefaultMonospace_8);

  c_->putText(-4, 20, "42", k_colorWhite, k_font_DroidSansMono_Regular_32_1bpp);

  c_->putText(
    20, 24, "Optimism is a lack of information.", k_colorTransparent, k_font_DefaultMonospace_7);

  c_->putText(12, 70, "Optimism", k_colorWhite, k_font_DroidSansMono_Regular_20_8bpp);
  c_->putText(12, 80, "is a lack of information.", k_colorWhite, k_font_DefaultMonospace_5);

  c_->putText(-4, 55, "42 42 42 42 42 42 42 42 42 ", k_colorRed, k_font_DroidSansMono_Regular_32_8bpp);

  c_->putText(4000, 4400, "Optimism is a lack of information.", k_colorWhite, k_font_DefaultMonospace_7);
}

//--------------------------------------------------------------------------------------------------

void canvas(Canvas* c_)
{
  unsigned x = static_cast<unsigned>(c_->width() * 0.1);
  unsigned y = static_cast<unsigned>(c_->height() * 0.1);
  unsigned w = static_cast<unsigned>(c_->width() * 0.8);
  unsigned h = static_cast<unsigned>(c_->height() * 0.8);

  c_->white();
  c_->invert();

  DynamicCanvas internalCanvas(w, h);

  for (unsigned j = 0; j < w; j++)
  {
    for (unsigned i = 0; i < h; i++)
    {
      internalCanvas.setPixel(j, i, {static_cast<uint8_t>(j), static_cast<uint8_t>(255 - j), 0});
    }
  }

  DynamicCanvas internaInternallCanvas(w, h);

  for (unsigned j = 0; j < w / 2; j++)
  {
    for (unsigned i = 0; i < h / 2; i++)
    {
      internaInternallCanvas.setPixel(j,
        i,
        {static_cast<uint8_t>(j * 2), static_cast<uint8_t>(j * 2), static_cast<uint8_t>(j * 2)});
    }
  }
  internalCanvas.putCanvas(internaInternallCanvas, (w / 2), (h / 2));
  c_->putCanvas(internalCanvas, x, y);

  c_->putCanvas(internalCanvas, 3000, 3000);
}

//--------------------------------------------------------------------------------------------------

void bitmap(Canvas* c_)
{
  unsigned w = c_->width();
  unsigned h = c_->height();

  uint8_t bmp_1[] = {
    0x03, 0xC0, 0x0C, 0x30, 0x30, 0x0C, 0x41, 0x82, 0x41, 0x82, 0x30, 0x0C, 0x0C, 0x30, 0x03, 0xC0};

  // clang-format off
  uint8_t bmp_2[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
    0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,
    0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
    0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00,
    0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00,
    0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
    0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
    0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
    0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
    0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x80, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00,
    0x00, 0x01, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00,
    0x00, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
    0x00, 0x03, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
    0x00, 0x07, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
    0x00, 0x07, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
    0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
    0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
    0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
    0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
    0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  // clang-format on

  for (unsigned i = 0; i < w; i += 16)
  {
    for (unsigned j = 0; j < h; j += 8)
    {
      c_->putBitmap(
        i, j, 16, 8, bmp_1, 1, {0x44, static_cast<uint8_t>(j * 2), static_cast<uint8_t>(i * 2)});
    }
  }

  c_->putBitmap((w - 128) / 2, 0, 128, 128, bmp_2,1, k_colorInvert);
  c_->putBitmap(w * 2, 0, 128, 128, bmp_2,1, k_colorInvert);
}

//--------------------------------------------------------------------------------------------------

} // namespace test
} // namespace rastr
} // namespace sl
